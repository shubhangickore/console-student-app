
PR1.
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      min-height: 100vh;
      display: flex;
    }
    .sidebar {
      min-width: 200px;
      max-width: 200px;
      background-color: #343a40;
      color: white;
    }
    .sidebar a {
      color: white;
      text-decoration: none;
      display: block;
      padding: 10px;
    }
    .sidebar a:hover {
      background-color: #495057;
    }
    .content {
      flex: 1;
      padding: 20px;
    }
  </style>
</head>
<body>

  <!-- Sidebar -->
  <div class="sidebar d-flex flex-column p-3">
    <h4 class="text-center">Admin Panel</h4>
    <a href="#">Dashboard</a>
    <a href="#">Students</a>
    <a href="#">Courses</a>
    <a href="#">Exams</a>
    <a href="#">Settings</a>
  </div>

  <!-- Main Content -->
  <div class="content">
  <h2 class="mb-4">Dashboard Overview</h2>
    <div class="row g-3">
      <div class="col-md-4">
        <div class="card text-bg-primary">
          <div class="card-body">
            <h5 class="card-title">Total Students</h5>
            <p class="card-text fs-4">1,250</p>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card text-bg-success">
          <div class="card-body">
            <h5 class="card-title">Courses Offered</h5>
            <p class="card-text fs-4">45</p>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card text-bg-warning">
          <div class="card-body">
            <h5 class="card-title">Upcoming Exams</h5>
            <p class="card-text fs-4">12</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PR.2
p2.register.html
<!DOCTYPE html>
<html>
<head>
  <title>Register</title>
</head>
<body>
  <h2>Register</h2>
  <form id="form">
    <input id="name" placeholder="Name" required><br>
    <input id="email" type="email" placeholder="Email" required><br>
    <input id="pass" type="password" placeholder="Password" required><br>
    <button type="submit">Submit</button>
  </form>

  <script>
    const form = document.getElementById('form');
    const nameInput = document.getElementById('name');
    const emailInput = document.getElementById('email');
    const passInput = document.getElementById('pass');

    form.onsubmit = e => {
      e.preventDefault();
      const user = {
        name: nameInput.value.trim(),
        email: emailInput.value.trim(),
        pass: passInput.value
      };

      const users = JSON.parse(localStorage.getItem("users") || "[]");
      users.push(user);
      localStorage.setItem("users", JSON.stringify(users));

      // Simulated AJAX POST
      fetch("https://example.com/api", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(user)
      }).finally(() => location.href = "p2Users.html");
    };
  </script>
</body>
</html>
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
p2Users.html
<!DOCTYPE html>
<html>
<head>
  <title>Users</title>
</head>
<body>
  <h2>User List</h2>
  <ul id="list"></ul>

  <script>
    // Wait for the DOM to fully load
    window.onload = () => {
      const list = document.getElementById("list");
      const users = JSON.parse(localStorage.getItem("users") || "[]");

      users.forEach(u => {
        const li = document.createElement("li");
        li.textContent = `${u.name} - ${u.email}`;
        list.appendChild(li);
      });
    };
  </script>
</body>
</html>
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

GIT
cd path/to/your/folder
git init
git remote add origin https://github.com/your-username/your-repo.git
git add .
git commit -m "Initial commit"
git push -u origin main
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DOCKER
1.Update System:

sudo apt update
sudo apt upgrade

 

2.Install Dependencies:

sudo apt install apt-transport-https ca-certificates curl software-properties-common

 

3Add Dockerâ€™s GPG Key:
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
 

4.Add Docker Repository:
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
 

5.Install Docker Engine:
sudo apt update
sudo apt install docker-ce
 

6.start and enable docker
sudo systemctl start docker
sudo systemctl enable docker
 

7.run
newgrp docker
 

8.verify installation
docker --version
docker run hello-world
commands:
docker pull image_name             # Download an image from Docker Hub
docker images                      # List downloaded images
docker rmi image_id_or_name        # Remove an image
docker ps                                # List running containers
docker ps -a                             # List all containers (including stopped)
ocker stop container_id_or_name         # Stop a running container
docker start container_id_or_name        # Start a stopped container
docker restart container_id_or_name      # Restart a container
docker rm container_id_or_name           # Remove a container
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Angular:
LOGINCOMPONENT:
<h1>Login Form</h1>
<form action="">
  <div>
    Email<input type="text" name="Email" [(ngModel)]="data.Email">
    <br><br>
    Password <input type="password" name="Password" [(ngModel)]="data.Password">
    <br><br>
    <button (click)="doLogin()">Login</button>
    <button (click)="doRegistration()">Register</button>
  </div>
</form>

<br>
<button routerLink="/">Back to Home</button>
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LOGINCOMPONENET.TS
import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  constructor(private router: Router) {}

  userArray: any[] = [];

  data = {
    Email: '',
    Password: ''
  }
  doLogin() {
    this.userArray = JSON.parse(localStorage.getItem('users') || '[]');

    const match = this.userArray.find(user =>
      user.Email === this.data.Email && user.Password === this.data.Password
    );

    if (match) {
      alert("Login successful!");
      localStorage.setItem('loggedInUser', JSON.stringify(match)); // Optional: store logged-in user
      this.router.navigate(['/profile']);
    } else {
      alert("Login unsuccessful. Please check your credentials.");
    }
  }

  doRegistration() {
    this.router.navigate(['/register']);
  }
}
SHOWUSERCOMPONENT:
<h2>Registered Users</h2>

<table border="1" *ngIf="users.length > 0; else noUsers">
  <thead>
    <tr>
      <th>Name</th>
      <th>Email</th>
      <th>Mobile</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let user of users">
      <td>{{ user.Name }}</td>
      <td>{{ user.Email }}</td>
      <td>{{ user.Mobile }}</td>
    </tr>
  </tbody>
</table>

<ng-template #noUsers>
  <p>No users found. Please register users first.</p>
</ng-template>

<br>
<button routerLink="/">Back to Home</button> <!-- Add this Back button -->
 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
REGISTRATIONCOMPONENT:
<h1>Registration Form</h1>
<form action="">
  <div>
    Name<input type="text" name="Name" [(ngModel)]="data.Name">
    <br><br>
    Mobile <input type="text" name="Mobile" [(ngModel)]="data.Mobile">
    <br><br>
    Email<input type="text" name="Email" [(ngModel)]="data.Email">
    <br><br>
    Password <input type="password" name="Password" [(ngModel)]="data.Password">
    <br><br>
 
    <button (click)="doRegistration()">Register</button>
  </div>
</form>

<br>
<button routerLink="/">Back to Home</button> 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
REGISTRATIONCOMPONENET.TS
import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-registration',
  templateUrl: './registration.component.html',
  styleUrls: ['./registration.component.css']
})
export class RegistrationComponent {
  userArray: any[] = [];

  data = {
    Name: '',
    Email: '',
    Mobile: '',
    Password: ''
  };

  constructor(private router: Router) {}

  doRegistration() {
    this.userArray = JSON.parse(localStorage.getItem('users') || '[]');

    // Optional: prevent duplicate emails
    const exists = this.userArray.some(u => u.Email === this.data.Email);
    if (exists) {
      alert('User with this email already exists.');
      return;
    }

    this.userArray.push({ ...this.data });
    localStorage.setItem('users', JSON.stringify(this.userArray));
    alert('Registration successful!');

    // Clear form
    this.data = { Name: '', Email: '', Mobile: '', Password: '' };

    // Redirect to login
    this.router.navigate(['/login']);
  }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HOMECOMPONENT:
<h1>Welcome to User Management</h1>
<button routerLink="/register">Register</button>
<br><br>
<button routerLink="/login">Login</button>
<br><br>
<button routerLink="/showuser">Show Users</button> <!-- This should display the Show User button -->
NODEJSAPPL:
index.js:
const express = require ('express')
const app = express()
app.use(express.static('public'))
app.listen(3000,()=>{
    console.log("server is running on http://localhost:3000");
})
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NODEJSAPPL:
index.js:
const express = require ('express')
const app = express()
app.use(express.static('public'))
app.listen(3000,()=>{
    console.log("server is running on http://localhost:3000");
})

INDEX.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1> static web page</h1>
</body>
</html>
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
POSTMAN:
index.js
const dbconnnect = require('./mongodb');
const express = require('express');
const app = express();

app.use(express.json());

// GET all employees
app.get('/', async (req, resp) => {
  let result = await dbconnnect();
  result = await result.find().toArray(); // Fixed toArray()
  resp.send(result);
});

// POST add employee
app.post('/', async (req, resp) => {
  let result = await dbconnnect();
  result = await result.insertOne(req.body);
  resp.send("Data added successfully");
});

// DELETE employee by name (example)
app.delete('/delete/:name', async (req, resp) => {
  let result = await dbconnnect();
  const deleteResult = await result.deleteOne({ name: req.params.name });
  if (deleteResult.deletedCount > 0) {
    resp.send("Employee deleted successfully");
  } else {
    resp.send("Employee not found");
  }
});

app.listen(8000, () => {
  console.log("Server is running on http://localhost:8000");
});
 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
mongodb.js
const { MongoClient } = require('mongodb');
const url = "mongodb://localhost:27017";
const database = "student";
const client = new MongoClient(url);
const dbConnect = async () => {
  await client.connect(); // Await the connection
  const db = client.db(database); // Now it's safe to access db
  return db.collection("profile");
};
module.exports = dbConnect;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MOBILEJQURY:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>My College</title>
  <style>
    body {
      Arial, sans-serif;
      0;
      padding: 0;
      background: #f0f0f0;
    }
    header {
      background: #004080;
      color: white;
      padding: 20px;
      text-align: center;
    }
    nav {
      background: #003366;
      padding: 10px;
      text-align: center;
    }
    nav a {
      color: white;
      10px;
      text-decoration: none;
      font-weight: bold;
    }
    section {
      padding: 20px;
      background: white;
      15px;
      border-radius: 5px;
    }
    .toggle-link {
      color: #004080;
      cursor: pointer;
      text-decoration: underline;
    }
  </style>
</head>
<body>
 
  <header>
    <h1>Welcome to My College</h1>
    <p>Quality Education for Everyone</p>
  </header>
 
  <nav>
    <a href=''>About</a>
    <a href=''>Courses</a>
    <a href=''>Contact</a>
  </nav>
 
  <section id="about">
    <h2>About Us</h2>
    <p>We are a modern college providing top-notch education in various fields.</p>
  </section>
 
  <section id="courses">
    <h2 class="toggle-link">Click to Show/Hide Courses</h2>
    <div id="courseList">
      <ul>
        <li>B.Sc Computer Science</li>
        <li>B.A. English Literature</li>
        <li>B.Com Accounting</li>
        <li>B.Tech Information Technology</li>
      </ul>
    </div>
  </section>
 
  <section id="contact">
    <h2>Contact</h2>
    <p>Email: info@mycollege.edu</p>
    <p>Phone: +91-9876543210</p>
  </section>
 
  <footer style="text-align:center; background:#004080; color:white; padding:10px;">
    &copy; 2025 My College
  </footer>
 
  <!-- jQuery CDN -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
 
  <!-- jQuery Function -->
  <script>
    $(document).ready(function(){
      $('.toggle-link').click(function(){
        $('#courseList').slideToggle();
      });
    });
  </script>
</body>
</html>
 
